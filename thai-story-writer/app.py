import streamlit as st
import os
from dotenv import load_dotenv
from story_generator import ThaiStoryGenerator
import time

# Load environment variables
load_dotenv()

# Page configuration
st.set_page_config(
    page_title="AI ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ - Thai Story Writer",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for Thai fonts and better styling
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;500;600;700&display=swap');
    
    .main-title {
        font-family: 'Sarabun', sans-serif;
        color: #2E86AB;
        text-align: center;
        font-size: 3em;
        font-weight: 700;
        margin-bottom: 0.5em;
    }
    
    .subtitle {
        font-family: 'Sarabun', sans-serif;
        text-align: center;
        color: #666;
        font-size: 1.2em;
        margin-bottom: 2em;
    }
    
    .story-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .story-text {
        font-family: 'Sarabun', sans-serif;
        font-size: 1.1em;
        line-height: 1.8;
        color: #333;
        text-align: justify;
        text-indent: 2em;
    }
    
    .metadata-container {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #2E86AB;
        margin: 1rem 0;
    }
    
    .stTextArea textarea {
        font-family: 'Sarabun', sans-serif;
        font-size: 1em;
    }
    
    .stSelectbox label, .stTextInput label {
        font-family: 'Sarabun', sans-serif;
        font-weight: 500;
    }
</style>
""", unsafe_allow_html=True)

def initialize_session_state():
    """Initialize session state variables."""
    if 'story_generator' not in st.session_state:
        st.session_state.story_generator = None
    if 'generated_story' not in st.session_state:
        st.session_state.generated_story = None
    if 'story_history' not in st.session_state:
        st.session_state.story_history = []

def check_api_key():
    """Check if OpenAI API key is configured."""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        st.error("üîë ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î OpenAI API Key ‡πÉ‡∏ô environment variables ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå .env")
        st.info("‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key:\n1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ\n2. ‡πÄ‡∏û‡∏¥‡πà‡∏° OPENAI_API_KEY=your_api_key_here")
        return False
    return True

def main():
    """Main application function."""
    
    # Initialize session state
    initialize_session_state()
    
    # Main title
    st.markdown('<h1 class="main-title">üìö AI ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢</h1>', unsafe_allow_html=True)
    st.markdown('<p class="subtitle">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI ü§ñ</p>', unsafe_allow_html=True)
    
    # Check API key
    if not check_api_key():
        return
    
    # Initialize story generator
    if st.session_state.story_generator is None:
        try:
            st.session_state.story_generator = ThaiStoryGenerator()
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: {str(e)}")
            return
    
    generator = st.session_state.story_generator
    
    # Sidebar for settings
    with st.sidebar:
        st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        
        # Genre selection
        st.subheader("üé≠ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á")
        genres = generator.get_available_genres()
        selected_genre = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:",
            options=list(genres.keys()),
            format_func=lambda x: genres[x],
            key="genre_select"
        )
        
        # Show suggestions for selected genre
        with st.expander("üí° ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ"):
            suggestions = generator.get_story_suggestions(selected_genre)
            for i, suggestion in enumerate(suggestions, 1):
                st.write(f"{i}. {suggestion}")
        
        st.divider()
        
        # Story length
        st.subheader("üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á")
        lengths = generator.get_available_lengths()
        selected_length = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß:",
            options=list(lengths.keys()),
            format_func=lambda x: f"{lengths[x]['name']} ({lengths[x]['words']} ‡∏Ñ‡∏≥)",
            key="length_select"
        )
        
        st.divider()
        
        # Writing style
        st.subheader("‚úçÔ∏è ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô")
        styles = generator.get_available_styles()
        selected_style = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå:",
            options=list(styles.keys()),
            format_func=lambda x: styles[x],
            key="style_select"
        )
        
        st.divider()
        
        # Advanced settings
        with st.expander("üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"):
            temperature = st.slider(
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå (Temperature):",
                min_value=0.1,
                max_value=1.0,
                value=0.8,
                step=0.1,
                help="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á = ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡∏Å, ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥ = ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤"
            )
    
    # Main content area
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        
        # Story prompt input
        story_prompt = st.text_area(
            "‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡πà‡∏≤‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
            height=150,
            placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏™‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏Å‡πà‡∏≤...",
            help="‡πÉ‡∏™‡πà‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ AI ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô"
        )
        
        # Optional inputs
        col_char, col_setting = st.columns(2)
        
        with col_char:
            character_names = st.text_input(
                "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):",
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏¥‡∏£‡∏≤, ‡∏™‡∏°‡∏ä‡∏≤‡∏¢",
                help="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
            )
        
        with col_setting:
            setting = st.text_input(
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏â‡∏≤‡∏Å (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):",
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø, ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡πà‡∏≤",
                help="‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏â‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
            )
        
        # Generate button
        col_btn, col_clear = st.columns([1, 1])
        
        with col_btn:
            if st.button("üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á", type="primary", use_container_width=True):
                if story_prompt.strip():
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á... ‚ú®"):
                        result = generator.generate_story(
                            user_prompt=story_prompt,
                            genre=selected_genre,
                            length=selected_length,
                            style=selected_style,
                            character_names=character_names,
                            setting=setting,
                            temperature=temperature
                        )
                        
                        st.session_state.generated_story = result
                        
                        # Add to history
                        if result['success']:
                            st.session_state.story_history.append({
                                'prompt': story_prompt[:100] + "..." if len(story_prompt) > 100 else story_prompt,
                                'genre': genres[selected_genre],
                                'timestamp': time.strftime("%Y-%m-%d %H:%M:%S"),
                                'story': result['story'],
                                'metadata': result['metadata']
                            })
                else:
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á")
        
        with col_clear:
            if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", use_container_width=True):
                st.session_state.generated_story = None
                st.rerun()
    
    with col2:
        st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # Display usage statistics
        story_count = len(st.session_state.story_history)
        st.metric("‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß", story_count)
        
        if story_count > 0:
            # Genre distribution
            genre_counts = {}
            for story in st.session_state.story_history:
                genre = story['genre']
                genre_counts[genre] = genre_counts.get(genre, 0) + 1
            
            st.write("**‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°:**")
            for genre, count in sorted(genre_counts.items(), key=lambda x: x[1], reverse=True):
                st.write(f"‚Ä¢ {genre}: {count} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á")
        
        st.divider()
        
        # Story history
        if st.session_state.story_history:
            st.subheader("üìö ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á")
            for i, story in enumerate(reversed(st.session_state.story_history[-5:]), 1):
                with st.expander(f"{story['genre']} - {story['timestamp'][:10]}"):
                    st.write(f"**‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î:** {story['prompt']}")
                    if st.button(f"‡∏î‡∏π‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ", key=f"view_story_{len(st.session_state.story_history)-i}"):
                        st.session_state.generated_story = {
                            'success': True,
                            'story': story['story'],
                            'metadata': story['metadata']
                        }
                        st.rerun()
    
    # Display generated story
    if st.session_state.generated_story:
        result = st.session_state.generated_story
        
        if result['success']:
            st.markdown("---")
            st.subheader("üìñ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")
            
            # Story metadata
            metadata = result['metadata']
            st.markdown(f"""
            <div class="metadata-container">
                <strong>üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:</strong><br>
                üé≠ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {metadata['genre']}<br>
                üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {metadata['length_type']}<br>
                ‚úçÔ∏è ‡∏™‡πÑ‡∏ï‡∏•‡πå: {metadata['style']}<br>
                üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥: {metadata['word_count']} ‡∏Ñ‡∏≥<br>
                üë• ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: {metadata['characters']}<br>
                üèûÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {metadata['setting']}
            </div>
            """, unsafe_allow_html=True)
            
            # The story itself
            st.markdown(f"""
            <div class="story-container">
                <div class="story-text">
                    {result['story'].replace('\n\n', '</p><p>').replace('\n', '<br>')}
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Action buttons
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á", use_container_width=True):
                    st.code(result['story'], language=None)
                    st.success("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
            
            with col2:
                # Download as text file
                story_text = f"""‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: {story_prompt[:50]}...
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {metadata['genre']}
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {metadata['length_type']}
‡∏™‡πÑ‡∏ï‡∏•‡πå: {metadata['style']}
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {time.strftime("%Y-%m-%d %H:%M:%S")}

{result['story']}

---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ AI ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢"""
                
                st.download_button(
                    label="üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á",
                    data=story_text,
                    file_name=f"thai_story_{int(time.time())}.txt",
                    mime="text/plain",
                    use_container_width=True
                )
            
            with col3:
                if st.button("üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", use_container_width=True):
                    if story_prompt.strip():
                        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà... ‚ú®"):
                            new_result = generator.generate_story(
                                user_prompt=story_prompt,
                                genre=selected_genre,
                                length=selected_length,
                                style=selected_style,
                                character_names=character_names,
                                setting=setting,
                                temperature=temperature
                            )
                            st.session_state.generated_story = new_result
                            st.rerun()
        else:
            st.error(f"‚ùå {result['error']}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; font-family: Sarabun;'>
        <p>ü§ñ AI ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ OpenAI GPT-4o ‡πÅ‡∏•‡∏∞ Streamlit</p>
        <p>üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()