#!/usr/bin/env python3
"""
CLI version of Thai Story Writer
Command-line interface for generating Thai stories
"""

import argparse
import os
import sys
from dotenv import load_dotenv
from story_generator import ThaiStoryGenerator
import json
import time

# Load environment variables
load_dotenv()

def print_header():
    """Print application header."""
    print("=" * 60)
    print("ü§ñ AI ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ - Thai Story Writer CLI")
    print("=" * 60)

def print_genres(generator):
    """Print available genres."""
    genres = generator.get_available_genres()
    print("\nüìö ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ:")
    for key, thai_name in genres.items():
        print(f"  {key}: {thai_name}")

def print_lengths(generator):
    """Print available story lengths."""
    lengths = generator.get_available_lengths()
    print("\nüìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:")
    for key, info in lengths.items():
        print(f"  {key}: {info['name']} ({info['words']} ‡∏Ñ‡∏≥)")

def print_styles(generator):
    """Print available writing styles."""
    styles = generator.get_available_styles()
    print("\n‚úçÔ∏è ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô:")
    for key, thai_name in styles.items():
        print(f"  {key}: {thai_name}")

def interactive_mode():
    """Run in interactive mode."""
    print_header()
    print("üéØ ‡πÇ‡∏´‡∏°‡∏î‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö - ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á")
    print("-" * 60)
    
    # Check API key
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö OpenAI API Key")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENAI_API_KEY ‡πÉ‡∏ô environment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå .env")
        return
    
    try:
        generator = ThaiStoryGenerator()
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: {str(e)}")
        return
    
    print("\nüìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á:")
    
    # Get story prompt
    while True:
        story_prompt = input("\nüí≠ ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö): ").strip()
        if story_prompt:
            break
        print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á")
    
    # Show and select genre
    print_genres(generator)
    while True:
        genre = input("\nüé≠ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÄ‡∏ä‡πà‡∏ô romance, mystery): ").strip().lower()
        if genre in generator.get_available_genres():
            break
        print("‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")
    
    # Show and select length
    print_lengths(generator)
    while True:
        length = input("\nüìè ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡πÄ‡∏ä‡πà‡∏ô short, medium, long): ").strip().lower()
        if length in generator.get_available_lengths():
            break
        print("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")
    
    # Show and select style
    print_styles(generator)
    while True:
        style = input("\n‚úçÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå (‡πÄ‡∏ä‡πà‡∏ô casual, formal): ").strip().lower()
        if style in generator.get_available_styles():
            break
        print("‚ö†Ô∏è ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")
    
    # Optional inputs
    character_names = input("\nüë• ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö): ").strip()
    setting = input("üèûÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏â‡∏≤‡∏Å (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö): ").strip()
    
    # Temperature setting
    while True:
        try:
            temp_input = input("\nüîß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå 0.1-1.0 (default: 0.8): ").strip()
            if not temp_input:
                temperature = 0.8
                break
            temperature = float(temp_input)
            if 0.1 <= temperature <= 1.0:
                break
            print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.1-1.0")
        except ValueError:
            print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    
    # Generate story
    print("\n‚ú® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á...")
    print("‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
    
    result = generator.generate_story(
        user_prompt=story_prompt,
        genre=genre,
        length=length,
        style=style,
        character_names=character_names,
        setting=setting,
        temperature=temperature
    )
    
    if result['success']:
        print("\n" + "="*60)
        print("üéâ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        print("="*60)
        
        # Show metadata
        metadata = result['metadata']
        print(f"\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:")
        print(f"üé≠ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {metadata['genre']}")
        print(f"üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {metadata['length_type']}")
        print(f"‚úçÔ∏è ‡∏™‡πÑ‡∏ï‡∏•‡πå: {metadata['style']}")
        print(f"üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥: {metadata['word_count']} ‡∏Ñ‡∏≥")
        print(f"üë• ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: {metadata['characters']}")
        print(f"üèûÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {metadata['setting']}")
        
        print(f"\nüìñ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:")
        print("-" * 60)
        print(result['story'])
        print("-" * 60)
        
        # Ask to save
        save_choice = input("\nüíæ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏°? (y/n): ").strip().lower()
        if save_choice in ['y', 'yes', '‡πÉ‡∏ä‡πà', '1']:
            filename = f"thai_story_{int(time.time())}.txt"
            story_content = f"""‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î: {story_prompt}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {metadata['genre']}
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {metadata['length_type']}
‡∏™‡πÑ‡∏ï‡∏•‡πå: {metadata['style']}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥: {metadata['word_count']} ‡∏Ñ‡∏≥
‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: {metadata['characters']}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {metadata['setting']}
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {time.strftime("%Y-%m-%d %H:%M:%S")}

{result['story']}

---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ AI ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ - Thai Story Writer CLI"""
            
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(story_content)
                print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {filename}")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
    else:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['error']}")

def batch_mode(args):
    """Run in batch mode with command line arguments."""
    print_header()
    print("‚ö° ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ó‡∏ä‡πå - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
    print("-" * 60)
    
    # Check API key
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö OpenAI API Key")
        return
    
    try:
        generator = ThaiStoryGenerator()
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: {str(e)}")
        return
    
    print(f"üí≠ ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î: {args.prompt}")
    print(f"üé≠ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {args.genre}")
    print(f"üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {args.length}")
    print(f"‚úçÔ∏è ‡∏™‡πÑ‡∏ï‡∏•‡πå: {args.style}")
    
    print("\n‚ú® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á...")
    
    result = generator.generate_story(
        user_prompt=args.prompt,
        genre=args.genre,
        length=args.length,
        style=args.style,
        character_names=args.characters or "",
        setting=args.setting or "",
        temperature=args.temperature
    )
    
    if result['success']:
        print("\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        if args.output:
            # Save to file
            try:
                metadata = result['metadata']
                story_content = f"""‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î: {args.prompt}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {metadata['genre']}
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {metadata['length_type']}
‡∏™‡πÑ‡∏ï‡∏•‡πå: {metadata['style']}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥: {metadata['word_count']} ‡∏Ñ‡∏≥
‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: {metadata['characters']}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {metadata['setting']}
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {time.strftime("%Y-%m-%d %H:%M:%S")}

{result['story']}

---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ AI ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ - Thai Story Writer CLI"""
                
                with open(args.output, 'w', encoding='utf-8') as f:
                    f.write(story_content)
                print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {args.output}")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
        else:
            # Print to console
            print(f"\nüìñ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:")
            print("-" * 60)
            print(result['story'])
            print("-" * 60)
    else:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['error']}")

def main():
    """Main CLI function."""
    # Load environment variables
    load_dotenv()
    
    parser = argparse.ArgumentParser(
        description='AI ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ - Thai Story Writer CLI',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:

  # ‡πÇ‡∏´‡∏°‡∏î‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
  python cli_app.py

  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πà‡∏ß‡∏ô
  python cli_app.py -p "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏±‡∏Å‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü" -g romance -l short -s casual

  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
  python cli_app.py -p "‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏õ‡πà‡∏≤‡∏•‡∏∂‡∏Å" -g adventure -l long -o my_story.txt

  # ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  python cli_app.py --list

‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: romance, mystery, fantasy, horror, adventure, comedy, drama, sci_fi, historical, slice_of_life
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: short, medium, long  
‡∏™‡πÑ‡∏ï‡∏•‡πå: casual, formal, poetic, modern, traditional
        """
    )
    
    parser.add_argument('-p', '--prompt', help='‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á')
    parser.add_argument('-g', '--genre', default='romance', 
                       choices=['romance', 'mystery', 'fantasy', 'horror', 'adventure', 
                               'comedy', 'drama', 'sci_fi', 'historical', 'slice_of_life'],
                       help='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (default: romance)')
    parser.add_argument('-l', '--length', default='medium',
                       choices=['short', 'medium', 'long'],
                       help='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (default: medium)')
    parser.add_argument('-s', '--style', default='casual',
                       choices=['casual', 'formal', 'poetic', 'modern', 'traditional'],
                       help='‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô (default: casual)')
    parser.add_argument('-c', '--characters', help='‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£')
    parser.add_argument('-S', '--setting', help='‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏â‡∏≤‡∏Å')
    parser.add_argument('-t', '--temperature', type=float, default=0.8,
                       help='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå 0.1-1.0 (default: 0.8)')
    parser.add_argument('-o', '--output', help='‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á')
    parser.add_argument('--list', action='store_true', help='‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
    
    args = parser.parse_args()
    
    # Show options if requested
    if args.list:
        try:
            generator = ThaiStoryGenerator()
            print_header()
            print_genres(generator)
            print_lengths(generator)
            print_styles(generator)
        except:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key")
        return
    
    # Validate temperature
    if not 0.1 <= args.temperature <= 1.0:
        print("‚ùå ‡∏Ñ‡πà‡∏≤ temperature ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.1-1.0")
        return
    
    # Run in appropriate mode
    if args.prompt:
        batch_mode(args)
    else:
        interactive_mode()

if __name__ == "__main__":
    main()